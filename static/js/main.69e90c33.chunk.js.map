{"version":3,"sources":["redux/counterSlice.ts","App.tsx","redux/middlewares/logger.ts","redux/store.ts","index.tsx"],"names":["counterSlice","createSlice","name","initialState","counter","reducers","increment","state","decrement","setCounter","action","payload","actions","counterReducer","reducer","App","dispatch","useDispatch","useSelector","useState","value","setValue","resetValue","type","onChange","e","target","trim","isNumber","Number","isNaN","className","onClick","logger","api","next","store","configureStore","middleware","getDefaultMiddlware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAUMA,EAAeC,YAAY,CAC/BC,KAAM,UACNC,aANiC,CACjCC,QAAS,GAMTC,SAAU,CACRC,UAAW,SAACC,GACVA,EAAMH,SAAW,GAEnBI,UAAW,SAACD,GACVA,EAAMH,SAAW,GAEnBK,WAAY,SAACF,EAAOG,GAClBH,EAAMH,QAAUM,EAAOC,YAKtB,EAA6CX,EAAaY,QAAlDN,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,UAAWC,EAA9B,EAA8BA,WACxBI,EAAiBb,EAAac,Q,OCpB9BC,EAAM,WACjB,IAAMC,EAAWC,cACXb,EAAUc,aAAY,SAACX,GAAD,OAAsBA,EAAMH,WACxD,EAA0Be,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAQMC,EAAa,WACjBN,EAASP,EAAW,IACpBY,EAAS,KAGX,OACE,qCACE,uBAAOE,KAAK,OAAOH,MAAOA,EAAOI,SAbd,SAACC,GACtB,IAAML,EAAQK,EAAEC,OAAON,MAAMO,OACvBC,EAA6B,kBAAVR,IAAuBS,OAAOC,OAAOV,GAC9DC,EAASO,EAAWR,EAAQ,OAW1B,sBAAKW,UAAU,MAAf,0BAAmC3B,KACnC,wBAAQ4B,QAAS,kBAAMhB,EAASR,MAAhC,mBACA,wBAAQwB,QAAS,kBAAMhB,EAASV,MAAhC,mBACA,wBAAQ0B,QAAS,kBAAMhB,EAASP,GAAYW,KAA5C,wBACA,wBAAQY,QAAS,kBAAMhB,EAASM,IAAhC,8B,QC5BOW,EAAqB,SAACC,GAAD,OAAS,SAACC,GAAD,OAAU,SAACzB,GAepD,OAFeyB,EAAKzB,MCXT0B,EAAQC,YAAe,CAClCvB,QAASD,EACTyB,WAAY,SAACC,GACX,MAAM,GAAN,mBAAWA,KAAX,CAAkCN,OCDtCO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.69e90c33.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\ninterface InitialState {\r\n  counter: number\r\n}\r\n\r\nconst initialState: InitialState = {\r\n  counter: 0,\r\n}\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.counter += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.counter -= 1\r\n    },\r\n    setCounter: (state, action: PayloadAction<number>) => {\r\n      state.counter = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { increment, decrement, setCounter } = counterSlice.actions\r\nexport const counterReducer = counterSlice.reducer\r\n","import React, { ChangeEvent, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { increment, decrement, setCounter } from './redux/counterSlice'\n\nimport { RootState } from './redux/store'\n\nexport const App = () => {\n  const dispatch = useDispatch()\n  const counter = useSelector((state: RootState) => state.counter)\n  const [value, setValue] = useState('')\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim()\n    const isNumber = typeof +value === 'number' && !Number.isNaN(+value)\n    setValue(isNumber ? value : '')\n  }\n\n  const resetValue = () => {\n    dispatch(setCounter(0))\n    setValue('')\n  }\n\n  return (\n    <>\n      <input type=\"text\" value={value} onChange={handleOnChange} />\n      <div className=\"App\">Your Counter {counter}</div>\n      <button onClick={() => dispatch(decrement())}>Minus</button>\n      <button onClick={() => dispatch(increment())}>Plus </button>\n      <button onClick={() => dispatch(setCounter(+value))}>Set Value </button>\n      <button onClick={() => dispatch(resetValue)}>Reset Value </button>\n    </>\n  )\n}\n","import { Middleware } from 'redux'\r\n\r\nexport const logger: Middleware = (api) => (next) => (action) => {\r\n  const isDevelopmentMode = process.env.NODE_ENV === 'development'\r\n\r\n  if (isDevelopmentMode) {\r\n    console.log(\r\n      `%cMODE %c${process.env.NODE_ENV}`,\r\n      'color:#956320; font-weight: 900;',\r\n      'color:#786595'\r\n    )\r\n\r\n    console.log('%cACTION', 'color:#ff0044; font-weight: 900;', action)\r\n  }\r\n\r\n  const result = next(action)\r\n  isDevelopmentMode && console.log('current state', api.getState())\r\n  return result\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { counterReducer } from './counterSlice'\r\nimport { logger } from './middlewares/logger'\r\n\r\nexport const store = configureStore({\r\n  reducer: counterReducer,\r\n  middleware: (getDefaultMiddlware) => {\r\n    return [...getDefaultMiddlware(), logger]\r\n  },\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { App } from './App'\nimport { store } from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}